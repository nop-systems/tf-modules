# yaml-language-server: $schema=https://raw.githubusercontent.com/Relativ-IT/Butane-Schemas/Release/Butane-Schema.json
variant: fcos
version: "1.5.0"
passwd:
  users:
    - name: core
      ssh_authorized_keys: ${ssh_authorized_keys}
storage:
  directories:
    - path: /var/containers/pretix/data
    - path: /var/containers/postgres/data
    - path: /var/containers/valkey/data
    - path: /var/containers/secrets/postgres

  files:
    - path: /etc/containers/systemd/pretix.network
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Podman network pretix to talk to valkey and postgres
          [Network]
          IPv6=true
          #Subnet=
    - path: /etc/containers/systemd/pretix.pod
      mode: 0644
      contents:
        inline: |
          [Pod]
          PodmanArgs=--userns=auto:size=65536 --exit-policy=continue

          Network=container.network
          Network=pretix.network

    - path: /etc/containers/systemd/pretix.container
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Pretix
          After=network-online.target local-fs.target vault-agent.service
          Wants=postgres.service valkey.service

          [Container]
          Image=${pretix_image}
          Pull=newer
          AutoUpdate=registry
          LogDriver=journald
          Notify=healthy

          Volume=/var/containers/pretix/data:/data:Z,U
          Volume=/var/containers/secrets/pretix/pretix.cfg:/etc/pretix/pretix.cfg:Z,U

          HealthCmd="wget --no-verbose --tries=1 --spider http://localhost/healthcheck || exit 1
          HealthInterval=10s
          HealthRetries=5
          HealthStartPeriod=20s
          HealthTimeout=5s

          Pod=pretix.pod

          [Service]
          Restart=always
          RestartSec=1s
          RestartSteps=10
          RestartMaxDelaySec=5m

          [Install]
          WantedBy=default.target
    - path: /etc/containers/systemd/pretix-cron.container
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Pretix periodic tasks
          After=network-online.target local-fs.target vault-agent.service
          Wants=postgres.service valkey.service

          [Container]
          Image=${pretix_image}
          Pull=newer
          AutoUpdate=registry
          LogDriver=journald

          Volume=/var/containers/pretix/data:/data:Z,U
          Volume=/var/containers/secrets/pretix/pretix.cfg:/etc/pretix/pretix.cfg:Z,U

          Exec=PRETIX_CONFIG_FILE=/etc/pretix/pretix.cfg python -m pretix runperiodic

          Pod=pretix.pod

          [Service]
          Restart=always
          RestartSec=1s
          RestartSteps=10
          RestartMaxDelaySec=5m

          [Install]
          WantedBy=default.target
    - path: /etc/containers/systemd/postgres.container
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=PostgreSQL database
          After=network-online.target local-fs.target vault-agent.service

          [Container]
          Image=${postgres_image}
          Pull=newer
          AutoUpdate=registry
          LogDriver=journald
          UserNS=auto
          Notify=healthy

          Environment=POSTGRES_PASSWORD_FILE=/run/secrets/password
          Environment=POSTGRES_USER=pretix
          Environment=POSTGRES_DB=pretix

          Volume=/var/containers/postgres/data:/var/lib/postgresql/data:Z,U
          Volume=/var/containers/secrets/postgres:/run/secrets:z,idmap,ro

          HealthCmd=pg_isready -d pretix -U pretix
          HealthInterval=30s
          HealthRetries=5
          HealthStartPeriod=20s
          HealthTimeout=5s

          Network=pretix.network

          [Service]
          Restart=always
          RestartSec=1s
          RestartSteps=10
          RestartMaxDelaySec=5m

          [Install]
          WantedBy=default.target
    - path: /etc/containers/systemd/valkey.container
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Valkey Cache
          After=network-online.target local-fs.target

          [Container]
          Image=${valkey_image}

          Pull=newer
          LogDriver=journald
          UserNS=auto
          Notify=healthy

          Volume=/var/containers/valkey/data:/data:Z,U

          HealthCmd=valkey-cli ping | grep PONG
          HealthInterval=30s
          HealthRetries=5
          HealthStartPeriod=20s
          HealthTimeout=3s

          Network=pretix.network

          [Service]
          Restart=always
          RestartSec=1s
          RestartSteps=10
          RestartMaxDelaySec=5m

          [Install]
          WantedBy=default.target
    - path: /etc/vault-agent/config.d/pretix.hcl
      mode: 0644
      overwrite: true
      contents:
        inline: |
          template {
            destination = "/vault/secrets/postgres/password"
            perms = "0600"
            contents = <<-EOT
              {{- with secret "kv/data/service/${ service_fqdn }/postgres" -}}
              {{ .Data.data.password }}
              {{- end }}
              EOT
          }

          template {
            destination = "/vault/secrets/pretix/pretix.cfg"
            perms = "0600"
            contents = <<-EOT
              [pretix]
              instance_name=${ instance_name }
              url=https://${ public_fqdn }
              currency=${ currency }
              datadir=/data
              registration=off

              [locale]
              default=${ language }
              timezone=${ timezone }

              [database]
              backend=postgresql
              name=pretix
              {{- with secret "kv/data/service/${ service_fqdn }/postgres" -}}
              user=pretix
              password={{ .Data.data.password }}
              {{- end }}
              host=systemd-postgres

              [mail]
              from=${ mail_from }

              {{- with secret "kv/data/service/${ service_fqdn }/smtp" -}}
              host={{ .Data.data.host }}
              user={{ .Data.data.username }}
              password={{ .Data.data.password }}
              port={{ .Data.data.port }}
              {{- end }}
              tls=off
              ssl=on

              [redis]
              location=redis://systemd-valkey/0
              sessions=true

              [metrics]
              enabled=true

              [celery]
              backend=redis://systemd-valkey/1
              broker=redis://systemd-valkey/2
              EOT
          }

          template {
            destination = "/vault/secrets/monitoring/pretix-postgres-datasource"
            perms = "0600"
            contents = <<-EOT
              {{- with secret "kv/data/service/${ service_fqdn }/postgres" -}}
              postgresql://pretix:{{ .Data.data.password }}@systemd-postgres:5432/pretix?sslmode=disable
              {{- end -}}
              EOT
          }
    - path: /etc/monitoring/alloy.d/pretix.alloy
      contents:
        inline: |
          prometheus.scrape "pretix" {
            forward_to = [
              prometheus.relabel.replace_instance.receiver,
            ]
            targets = [
              {
                "__address__" = "systemd-pretix:80",
              },
            ]
            metrics_path = "/metrics"
          }

          local.file "pretix_postgres_datasource" {
            filename = "/secrets/pretix-postgres-datasource"
            is_secret = true
          }

          prometheus.exporter.postgres "pretix" {
            data_source_names = [local.file.pretix_postgres_datasource.content]
          }

          prometheus.scrape "postgres" {
            forward_to = [prometheus.relabel.replace_instance.receiver]
            targets = prometheus.exporter.postgres.pretix.targets
          }

          prometheus.exporter.redis "pretix" {
              redis_addr = "systemd-valkey:6379"
          }

          prometheus.scrape "valkey" {
            forward_to = [prometheus.relabel.replace_instance.receiver]
            targets = prometheus.exporter.redis.pretix.targets
          }
systemd:
  units:
    - name: pretix-cron.timer
      enabled: true
      contents: |
        [Unit]
        Description=Run pretix cron
        Wants=postgres.service valkey.service
        After=postgres.service valkey.service

        [Timer]
        OnUnitActiveSec=30min
        Persistent=true

        [Install]
        WantedBy=timers.target