# yaml-language-server: $schema=https://raw.githubusercontent.com/Relativ-IT/Butane-Schemas/Release/Butane-Schema.json
variant: fcos
version: "1.5.0"
storage:
  directories:
    - path: /var/containers/xenorchestra/data
    - path: /var/containers/valkey/data
  files:
    - path: /etc/containers/systemd/xenorchestra.container
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Xen Orchestra
          After=network-online.target local-fs.target

          [Container]
          Image=${xenorchestra_image}

          Pull=newer
          AutoUpdate=registry
          LogDriver=journald
          UserNS=auto

          PublishPort=443:8443

          Environment=XO_HTTPS_LISTEN_PORT=8443
          Environment=XO_HTTPS_LISTEN_CERT=/tls/fullchain.pem
          Environment=XO_HTTPS_LISTEN_KEY=/tls/privkey.pem
          Environment=XO_REDIS_URI=redis://systemd-valkey:6379/0
          Environment=XOA_PLAN=5
          Environment=NODE_ENV=production
          Environment=DEBUG=xo:main

          AddCapability=SYS_ADMIN
          AddCapability=NET_ADMIN
          AddDevice=/dev/fuse:/dev/fuse
          AddDevice=/dev/loop-control:/dev/loop-control

          Volume=/var/containers/xenorchestra/data:/storage:Z,U
          Volume=/var/containers/secrets/tls/${fqdn}:/tls:z,idmap,ro

          Network=container.network

          [Service]
          Restart=always

          [Install]
          WantedBy=default.target
    - path: /etc/containers/systemd/valkey.container
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Valkey Cache
          After=network-online.target local-fs.target vault-agent.service

          [Container]
          Image=${valkey_image}
          Exec=--appendonly yes

          Pull=newer
          AutoUpdate=registry
          LogDriver=journald
          UserNS=auto
          Notify=healthy

          Volume=/var/containers/valkey/data:/data:Z,U

          HealthCmd=valkey-cli ping | grep PONG
          HealthInterval=30s
          HealthRetries=5
          HealthStartPeriod=20s
          HealthTimeout=3s

          Network=container.network

          [Service]
          Restart=always

          [Install]
          WantedBy=default.target
    - path: /etc/containers/systemd/authentik-ldap.container
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=authentik LDAP outpost
          After=network-online.target local-fs.target vault-agent.service

          [Container]
          Image=${authentik_ldap_image}

          Pull=newer
          AutoUpdate=registry
          LogDriver=journald
          UserNS=auto

          # metrics
          PublishPort=9300:9300

          Environment=AUTHENTIK_HOST=${authentik_host}
          Environment=AUTHENTIK_INSECURE=false
          Environment=AUTHENTIK_TOKEN=file:///secrets/token

          Volume=/var/containers/secrets/authentik_ldap:/secrets:z,idmap
          Volume=/var/containers/secrets/tls/this/root_ca.pem:/etc/ssl/certs/root_ca.pem:ro

          Network=container.network

          [Service]
          Restart=always
          RestartSec=1s
          RestartSteps=10
          RestartMaxDelaySec=5m

          [Service]
          Restart=always

          [Install]
          WantedBy=default.target
    - path: /etc/vault-agent/config.d/authentik-ldap.hcl
      mode: 0644
      overwrite: true
      contents:
        inline: |
          template {
            contents = "{{ with secret \"kv/data/service/${ service_fqdn }/authentik_ldap\" }}{{ .Data.data.token }}{{ end }}"
            destination = "/vault/secrets/authentik_ldap/token"
          }
    - path: /etc/monitoring/alloy.d/xenorchestra.alloy
      contents:
        inline: |
          prometheus.scrape "postgres" {
            forward_to = [prometheus.relabel.replace_instance.receiver]
            targets = prometheus.exporter.postgres.pretix.targets
          }

          prometheus.exporter.redis "pretix" {
              redis_addr = "systemd-valkey:6379"
          }

          prometheus.scrape "valkey" {
            forward_to = [prometheus.relabel.replace_instance.receiver]
            targets = prometheus.exporter.redis.pretix.targets
          }

          prometheus.scrape "authentik" {
            forward_to = [
              prometheus.relabel.replace_instance.receiver,
            ]
            targets = [
              {
                "__address__" = "systemd-authentik-ldap:9300",
              },
            ]
            metrics_path = "/metrics"
          }
systemd:
  units:
    - name: xenorchestra-reload-on-cert-renew.path
      enabled: true
      contents: |
        [Unit]
        Description=Watch vault-agent cert for changes
        After=vault-agent.service

        [Path]
        PathChanged=/var/containers/secrets/tls/this/fullchain+privkey.pem

        [Install]
        WantedBy=paths.target
    - name: xenorchestra-reload-on-cert-renew.service
      contents: |
        [Unit]
        Description=Reload XenOrchestra when Certificate changes

        [Service]
        Type=oneshot
        ExecStart=-podman kill --signal HUP systemd-xenorchestra

        [Install]
        WantedBy=multi-user.target
