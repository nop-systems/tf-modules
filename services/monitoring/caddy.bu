# yaml-language-server: $schema=https://raw.githubusercontent.com/Relativ-IT/Butane-Schemas/Release/Butane-Schema.json
variant: fcos
version: "1.5.0"
storage:
  directories:
    - path: /etc/caddy
    - path: /var/containers/caddy/config
    - path: /var/containers/caddy/data
    - path: /var/containers/secrets/tls-admin
  files:
    - path: /etc/caddy/Caddyfile
      mode: 0644
      overwrite: true
      contents:
        inline: |
          {
            acme_ca ${acme_ca}
            auto_https disable_redirects
            servers {
              trusted_proxies static ${trusted_proxies}
            }
            fallback_sni ${service_fqdn}
          }

          (common) {
            handle_errors {
              respond "Error {err.status_code} {err.status_text} on ${fqdn}: {err.message} ({err.trace}, {err.id})"
            }
            tls {
              issuer acme {
                # disable http challenge because only https port is published
                disable_http_challenge
              }
            }
            log
          }

          (tls_client_admin) {
            tls {
              client_auth {
                mode require_and_verify
                trust_pool file /tls/admin_client_ca.pem
              }
            }
          }

          # Grafana
          https://${fqdn}, https://grafana.${fqdn}, https://${grafana_fqdn}, https://${service_fqdn} {
            import common
            reverse_proxy systemd-grafana:3000
          }

          # Loki
          (loki_handlers) {
            @cluster path /ring /memberlist /config /metrics /ready /services /log_level /flush /loki/api/v1/format_query
            @write {
              path /loki/api/v1/push
              path /distributor/* /ingester/*
            }
            @read path /loki/api/v1/*
            @backend {
              path /indexgateway/* /ruler/* /compactor/*
              path /loki/api/v1/rules/* /api/prom/rules/* /prometheus/api/v1/rules /prometheus/api/v1/alerts
              path /loki/api/v1/delete
            }
            @deprecated path /api/prom/push /api/prom/tail /api/prom/query /api/prom/label /api/prom/label/*/values /api/prom/series

            handle @cluster {
              reverse_proxy {
                to systemd-loki-write:3100
                to systemd-loki-read:3100
                to systemd-loki-backend:3100
              }
            }
            handle @deprecated {
              respond "Deprecated endpoint (see https://grafana.com/docs/loki/latest/reference/loki-http-api/#deprecated-endpoints)" 410
            }
            handle @write {
              reverse_proxy systemd-loki-write:3100
            }
            handle @read {
              reverse_proxy systemd-loki-read:3100
            }
            handle @backend {
              reverse_proxy systemd-loki-backend:3100
            }
            respond loki.${fqdn} 404
          }

          https://loki.${fqdn}, https://${loki_fqdn} {
            import common
            import tls_client_admin
            import loki_handlers
          }

          http://:3100 {
            handle_errors {
              respond "Error {err.status_code} {err.status_text} on ${fqdn}: {err.message} ({err.trace}, {err.id})"
            }
            log
            import loki_handlers
          }

          # Prometheus
          https://prometheus.${fqdn}, https://${prometheus_fqdn} {
            import common
            import tls_client_admin
            reverse_proxy systemd-prometheus:9090
          }

          # Alertmanager
          https://alertmanager.${fqdn}, https://${alertmanager_fqdn} {
            import common
            import tls_client_admin
            reverse_proxy systemd-alertmanager:9093
          }

          # Ingress
          https://ingress.${fqdn}, https://${ingress_fqdn} {
            import common
            tls {
              client_auth {
                mode require_and_verify
                # Use Root CA of large PKI so any host can use its certificate for writing
                trust_pool file /tls/root_ca.pem /tls/admin_client_ca.pem
              }
            }

            # https://grafana.com/docs/loki/latest/reference/loki-http-api/#ingest-logs
            handle /loki/api/v1/push {
              reverse_proxy systemd-loki-write:3100
            }

            # https://grafana.com/docs/loki/latest/reference/loki-http-api/#ingest-logs-using-otlp
            handle /otlp/v1/logs {
              reverse_proxy systemd-loki-write:3100
            }

            # https://prometheus.io/docs/prometheus/latest/querying/api/#remote-write-receiver
            handle /prom/api/v1/write {
              uri strip_prefix /prom
              reverse_proxy systemd-prometheus:9090
            }

            # https://prometheus.io/docs/prometheus/latest/querying/api/#otlp-receiver
            handle /otlp/v1/metrics {
              rewrite * /api/v1{uri}
              reverse_proxy systemd-prometheus:9090
            }

            respond "Not Found" 404
          }
    - path: /usr/local/bin/caddy
      mode: 0755
      overwrite: true
      contents:
        inline: |
          #!/usr/bin/env sh
          CONTAINER_NAME=systemd-caddy
          COMMAND=caddy

          podman container exists $CONTAINER_NAME ||
              echo "Must be run as root to access container $CONTAINER_NAME"
          # shellcheck disable=SC2086
          podman exec -it $CONTAINER_NAME $COMMAND "$@"
    - path: /etc/containers/systemd/caddy.container
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Reverse Proxy
          After=network-online.target local-fs.target vault-agent.service

          [Container]
          Image=${caddy_image}
          Pull=newer
          AutoUpdate=registry
          LogDriver=journald
          UserNS=auto

          PublishPort=443:443
          PublishPort=443:443/udp

          Volume=/var/containers/caddy/config:/config:Z,U
          Volume=/var/containers/caddy/data:/data:Z,U
          Volume=/etc/caddy/Caddyfile:/etc/caddy/Caddyfile:Z,ro
          Volume=/var/containers/secrets/tls/this/root_ca.pem:/tls/root_ca.pem:z,idmap,ro
          Volume=/var/containers/secrets/tls-admin/admin_client_ca.pem:/tls/admin_client_ca.pem:z,idmap,ro
          Network=container.network

          [Service]
          Restart=always
          RestartSec=1s
          RestartSteps=10
          RestartMaxDelaySec=5m

          [Install]
          WantedBy=multi-user.target default.target
