variant: fcos
version: "1.5.0"
passwd:
  users:
    - name: core
      ssh_authorized_keys: ${ssh_authorized_keys}
storage:
  directories:
    - path: /var/containers/vault/logs
    - path: /var/containers/vault/raft
    - path: /var/containers/vault/config
    - path: /var/containers/dnsrobocert/certs
    - path: /var/containers/dnsrobocert/config
    - path: /var/containers/haproxy
  files:
    - path: /etc/systemd/resolved.conf.d/80-disable-cache.conf
      overwrite: true
      contents:
        inline: |
          # Disable Cache to prevent failing ACME challenges
          [Resolve]
          Cache=no
    - path: /var/containers/vault/config/vault.hcl
      mode: 0644
      overwrite: true
      contents:
        inline: |
          storage "raft" {
            path    = "/vault/file"
            node_id = "${fqdn}"
          }

          listener "tcp" {
            address       = "[::]:8200"
            cluster_address = "[::]:8201"

            proxy_protocol_behavior = "allow_authorized"
            proxy_protocol_authorized_addrs = [
              "127.0.0.1", "::1"
            ]

            tls_cert_file = "/vault/certs/live/vault/fullchain.pem"
            tls_key_file = "/vault/certs/live/vault/privkey.pem"

            telemetry {
              unauthenticated_metrics_access = true
            }
          }

          api_addr     = "https://${fqdn}:8200"
          cluster_addr = "https://${fqdn}:8201"
          ui           = true

          telemetry {
            prometheus_retention_time = "24h"
          }

    - path: /etc/containers/systemd/vault.container
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=vault server
          After=network-online.target local-fs.target
          # disable unit start rate limiting
          StartLimitIntervalSec=0

          [Container]
          Image=docker.io/hashicorp/vault:1.17
          Exec=server
          LogDriver=journald

          Volume=/var/containers/vault/raft:/vault/file:Z,U
          Volume=/var/containers/vault/logs:/vault/logs:Z,U
          Volume=/var/containers/vault/config:/vault/config:Z,U
          Volume=/var/containers/dnsrobocert/certs:/vault/certs:z,idmap

          UserNS=auto
          AddCapability=IPC_LOCK
          Ulimit=memlock=-1:-1

          PublishPort=8200:8200
          PublishPort=8201:8201
          Network=container.network

          [Service]
          Restart=always
          RestartSec=1s
          RestartSteps=10
          RestartMaxDelaySec=5m

          [Install]
          WantedBy=multi-user.target default.target
    - path: /etc/containers/systemd/dnsrobocert.container
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=dnsrobocert for vault
          After=network-online.target local-fs.target
          Before=vault.service
          AssertPathExists=/var/containers/dnsrobocert/dnsrobocert_token.env
          # disable unit start rate limiting
          StartLimitIntervalSec=0

          [Container]
          Image=docker.io/adferrand/dnsrobocert:latest
          Exec=dnsrobocert -c /etc/dnsrobocert/config.yml -d /etc/letsencrypt --one-shot
          Pull=always
          LogDriver=journald

          EnvironmentFile=/var/containers/dnsrobocert/dnsrobocert_token.env
          Volume=/var/containers/dnsrobocert/certs:/etc/letsencrypt:z,idmap
          Volume=/var/containers/dnsrobocert/config:/etc/dnsrobocert:Z,ro,idmap

          UserNS=auto

          Network=container.network

          [Service]
          Type=oneshot
          ExecStartPost=-/usr/bin/podman kill --signal HUP systemd-vault
          Restart=on-failure
          RestartSec=60s
          RestartSteps=5
          RestartMaxDelaySec=30m

          [Install]
          WantedBy=multi-user.target default.target
    - path: /var/containers/dnsrobocert/config/config.yml
      mode: 0644
      overwrite: true
      contents:
        inline: |
          acme:
            email_account: ${acme_email}
            certs_permissions:
              files_mode: 0600
              user: 100
              group: 1000
          profiles:
            - name: cf
              provider: cloudflare
              provider_options:
                auth_token: $${CF_AUTH_TOKEN}
                zone_id: ${cloudflare_zone_id}
          certificates:
            - name: vault
              domains: 
                - ${cluster_fqdn}
                - ${cluster_node_fqdn}
              profile: cf
    # replace after deployment so it does not end in state
    - path: /var/containers/dnsrobocert/dnsrobocert_token.env.example
      mode: 0600
      overwrite: true
      contents:
        inline: |
          CF_AUTH_TOKEN=replace-me
    - path: /etc/containers/systemd/haproxy.container
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=HAProxy Load Balancer
          After=network-online.target local-fs.target
          # disable unit start rate limiting
          StartLimitIntervalSec=0

          [Container]
          Image=ghcr.io/haproxytech/haproxy-docker-alpine:2.9
          Pull=always
          LogDriver=journald

          Volume=/var/containers/haproxy:/usr/local/etc/haproxy:Z,ro,idmap

          UserNS=auto

          PublishPort=443:443
          # stats, metrics
          PublishPort=8404:8404
          Network=container.network

          [Service]
          Restart=always
          RestartSec=1s
          RestartSteps=10
          RestartMaxDelaySec=5m

          [Install]
          WantedBy=multi-user.target default.target
    - path: /var/containers/haproxy/haproxy.cfg
      mode: 0644
      overwrite: true
      contents:
        inline: |
          global
            node ${fqdn}

          defaults
              timeout connect 5s
              timeout server 90s
              timeout client 30s
              timeout queue 30s

          listen vault
              bind :443
              mode tcp
              option httpchk GET /v1/sys/health
              http-check connect ssl
              option log-health-checks

              # close tcp connection when no backend is available instead of empty response
              acl unreachable nbsrv lt 1
              tcp-request connection reject if unreachable

              %{ for node, member in cluster_members ~}
              server ${node} ${node}.${cluster_fqdn}:8200 check send-proxy ca-file @system-ca inter 500ms fastinter 200ms rise 1
              %{ endfor ~}

          frontend stats
              mode http
              bind :8404
              http-request use-service prometheus-exporter if { path /metrics }
              stats enable
              stats uri /stats
              stats show-node
              stats refresh 10s
              stats admin if LOCALHOST

systemd:
  units:
    - name: dnsrobocert.timer
      contents: |
        [Unit]
        Description=Renew Certificate with dnsrobocert

        [Timer]
        OnUnitActiveSec=12h
        RandomizedDelaySec=1h
        Persistent=true

        [Install]
        WantedBy=timers.target
