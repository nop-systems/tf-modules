# yaml-language-server: $schema=https://raw.githubusercontent.com/Relativ-IT/Butane-Schemas/Release/Butane-Schema.json
variant: fcos
version: "1.5.0"
storage:
  directories:
    - path: /etc/monitoring/alloy.d
      mode: 0755
    - path: /var/containers/alloy/data
  files:
    - path: /etc/tmpfiles.d/metrics.conf
      mode: 0644
      contents:
        inline: |
          #Type Path         Mode User Group Age Argument 
          d     /run/metrics -    -    -     ~7d -
    - path: /etc/containers/systemd/monitoring.network
      mode: 0644
      contents:
        inline: |
          [Network]
          IPv6=true
          Subnet=10.89.255.0/24

    - path: /etc/containers/systemd/monitoring.pod
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Pod to keep monitoring network online

          [Pod]
          Network=monitoring.network
          PodmanArgs=--userns=auto --exit-policy=continue

          PublishPort=12345:12345
          Network=monitoring.network
          Network=vault-agent.network
          Network=container.network
    - path: /etc/containers/systemd/alloy.container
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description= Grafana Alloy metrics and logs agent
          After=network-online.target local-fs.target

          [Container]
          Image=docker.io/grafana/alloy:${grafana_alloy_version}
          Exec= run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /config

          Pull=newer
          AutoUpdate=registry
          LogDriver=journald

          Volume=/var/containers/alloy/data:/var/lib/alloy/data:Z,U
          Volume=/var/log/journal:/var/log/journal:z,idmap,ro
          Volume=/run/log/journal:/run/log/journal:z,idmap,ro
          Volume=/etc/monitoring/alloy.d:/config:Z,U,ro
          Volume=/vault/secrets/tls/${fqdn}:/tls:z,idmap,ro
          Volume=/vault/secrets/tls-admin:/tls-admin:z,idmap,ro
          Pod=monitoring.pod

          [Service]
          Restart=always
          RestartSec=1s
          RestartSteps=10
          RestartMaxDelaySec=5m

          [Install]
          WantedBy=multi-user.target default.target
    - path: /etc/monitoring/alloy.d/main.alloy
      mode: 0644
      contents:
        inline: |
          http {
            tls {
              cert_pem = "/tls/fullchain.pem"
              key_pem = "/tls/privkey.pem"
              client_auth_type = "RequireAndVerifyClientCert"
              client_ca_pem = "/tls-admin/admin_client_ca.pem"
            }
          }

          prometheus.remote_write "monitoring-ingress" {
            endpoint {
              url = "https://monitoring-ingress.service.studis-bht.de/prom/api/v1/push"
              cert_pem = "/tls/fullchain.pem"
              key_pem = "/tls/privkey.pem"
            }
          }

          loki.write "monitoring-ingress" {
            endpoint {
              url = "https://monitoring-ingress.service.studis-bht.de/loki/api/v1/push"
              cert_pem = "/tls/fullchain.pem"
              key_pem = "/tls/privkey.pem"
            }
          }

          loki.relabel "journal" {
            forward_to = []

            rule {
              source_labels = ["__journal__systemd_unit"]
              target_label  = "unit"
            }
            rule {
              source_labels = ["__journal__boot_id"]
              target_label  = "boot_id"
            }
            rule {
              source_labels = ["__journal__transport"]
              target_label  = "transport"
            }
            rule {
              source_labels = ["__journal_priority_keyword"]
              target_label  = "level"
            }
            rule {
              source_labels = ["__journal__hostname"]
              target_label  = "instance"
            }
          }

          loki.source.journal "read" {
            forward_to = [
              loki.write.monitoring-ingress.receiver,
            ]
            relabel_rules = loki.relabel.journal.rules
            labels = {
              "job" = "journal",
            }
          }

          prometheus.exporter.self "alloy" {}

          prometheus.scrape "alloy" {
            targets    = prometheus.exporter.self.alloy.targets
            forward_to = [
              prometheus.remote_write.montoring-ingress.receiver,
            ]
          }

          prometheus.scrape "node" {
            forward_to = [
              prometheus.remote_write.monitoring-ingress.receiver,
            ]
            targets = [
              {
                "__address__" = "host.containers.internal:9100",
              }
            ]
          }
          prometheus.scrape "podman" {
            forward_to = [
              prometheus.remote_write.monitoring-ingress.receiver,
            ]
            targets = [
              {
                "__address__" = "host.containers.internal:9882",
              }
            ]
          }

systemd:
  units:
    - name: prometheus-node-exporter.service
      dropins:
        - name: args.conf
          contents: |
            [Unit]
            After=monitoring-pod.service
            Requires=monitoring-pod.service

            [Service]
            EnvironmentFile=
            ExecStart=
            ExecStart=/usr/bin/prometheus-node-exporter \
              --web.listen-address 10.89.255.1:9100 \
              --collector.systemd
              --collector.textfile.directory /run/metrics
    - name: prometheus-podman-exporter.service
      dropins:
        - name: args.conf
          contents: |
            [Unit]
            After=monitoring-pod.service
            Requires=monitoring-pod.service

            [Service]
            EnvironmentFile=
            ExecStart=
            ExecStart=/usr/bin/prometheus-podman-exporter \
              --web.listen-address 10.89.255.1:9882 \
              --collector.enable-all
    - name: zincati-metrics-export.service
      contents: |
        [Unit]
        Description=export zincati metrics from socket to /run/metrics/zincati/zincati.prom

        [Service]
        Type=oneshot
        ExecStart=socat -u \
          UNIX-CONNECT:/run/zincati/public/metrics.promsock \
          OPEN:/run/metrics/zincati.prom,creat
        ExecStartPost=chcon system_u:object_r:container_file_t:s0 /run/metrics/zincati.prom

        RuntimeDirectory=metrics
        RuntimeDirectoryPreserve=yes
    - name: zincati-metrics-export.timer
      enabled: true
      contents: |
        [Unit]
        Description=export zincati metrics from socket to /run/metrics/zincati.prom
        After=zincati.service
        Requires=zincati.service

        [Timer]
        OnBootSec=5min
        OnUnitActiveSec=5min

        [Install]
        WantedBy=multi-user.target
